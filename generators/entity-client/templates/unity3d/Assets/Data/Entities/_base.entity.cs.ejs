using System;

namespace <%= unity3dAppName %>GUI.Data.Entities
{
  [Serializable]
  public class Base<%= persistClass %>
  {
  <%_ for (const field of fields.filter(field => !field.transient && (embedded || !field.id || !primaryKey.composite))) { _%>
    <%_ if (typeof field.javadoc !== 'undefined') { _%>
  <%- formatAsFieldJavadoc(field.javadoc) %>
    <%_ } _%>
    <%_ if (!dtoMapstruct && typeof field.javadoc !== 'undefined') { _%>
      @Schema(description = "<%- formatAsApiDescription(field.javadoc) %>"<% if (field.fieldValidationRequired) { %>, required = true<% } %>)
    <%_ } _%>
    public <%= field.javaFieldType %> <%= field.fieldName %>;
  
    public <%= field.javaFieldType %> <%= javaBeanCase(field.fieldName) %> { get {return <%= field.fieldName %>; } set {<%= field.fieldName %> = value; } }

    <%_ if (field.fieldWithContentType) { _%>
    public string <%= field.fieldName %>ContentType;

    public string <%= javaBeanCase(field.fieldName) %>ContentType { get {return <%= field.fieldName %>ContentType; } set {<%= field.fieldName %>ContentType = value; } }

    <%_ } _%>
  <%_ } _%>
  <%_ for (reference of dtoReferences) { _%>
    <%_ if (reference.collection && reference.relationship) { _%>
    public Set<<%= reference.relationship.otherEntity.entityNameCapitalized %>> <%= reference.name %> = new HashSet<>();

    <%_ } else if (reference.relationship) { _%>
    public <%= reference.relationship.otherEntity.entityNameCapitalized %> <%= reference.name %>;
      
    <%_ } _%>
  <%_ } _%>
    public override string ToString(){
      return UnityEngine.JsonUtility.ToJson (this, true);
      // return this.description;
    }
  }
}
