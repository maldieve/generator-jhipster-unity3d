#if UNITY_5_3_OR_NEWER
#define NOESIS
using Noesis;
using UnityEngine;

#else

using System.Windows;
using System.Windows.Controls;

using System.Windows.Media.Animation;

#endif

using System;
using System.Windows.Input;
using System.Threading.Tasks;
using System.Collections.Generic;

using <%= unity3dAppName %>;
using <%= unity3dAppName %>.Data.Entities;

namespace <%= unity3dAppName %>
{
    public class Base<%= persistClass %>DetailViewModel : NotifyPropertyChangedBase
    {
        private <%= unity3dAppName %>.Data.Repositories.<%= persistClass %>Repository <%= entityInstance %>Repository = new <%= unity3dAppName %>.Data.Repositories.<%= persistClass %>Repository();
        public ICommand Add<%= persistClass %>Command { get; private set; }
        public ICommand ExitCommand { get; private set; }	

        <%_ for (const field of fields.filter(field=> !field.transient && (embedded || !field.id || !primaryKey.composite))) { _%>
            <%_ if (field.javaFieldType === 'byte[]') { _%>
#if UNITY_5_3_OR_NEWER
        private Texture2D <%= field.fieldName %>;
        public Texture2D <%= javaBeanCase(field.fieldName) %> {get {return <%= field.fieldName %>;} set {<%= field.fieldName %> = value;} }
#endif
            <%_ } else { _%>
        private <%= field.javaFieldType %> <%= field.fieldName %>;
        public <%= field.javaFieldType %> <%= javaBeanCase(field.fieldName) %> {get {return <%= field.fieldName %>;} set {<%= field.fieldName %> = value;} }
            <%_ } _%>
        <%_ } _%>

        <%_ for (reference of dtoReferences) { _%>
            <%_ if (reference.collection && reference.relationship) { _%>
                // Implement with set references      
            <%_ } else if (reference.relationship) { _%>
        <%= unity3dAppName %>.Data.Repositories.<%= reference.relationship.otherEntity.entityNameCapitalized %>Repository <%= reference.name %>Repository = new <%= unity3dAppName %>.Data.Repositories.<%= reference.relationship.otherEntity.entityNameCapitalized %>Repository();
        private string _<%= reference.name %>Placeholder;
        public string <%= reference.relationship.otherEntity.entityNameCapitalized %>Placeholder { get {
                if (_<%= reference.name %> >= 0)
                {
                    _<%= reference.name %>Placeholder = "";
                }
                else
                {
                    _<%= reference.name %>Placeholder = "Select a <%= reference.relationship.otherEntity.entityNameCapitalized %>...";
                }
                return _<%= reference.name %>Placeholder;
            } set { _<%= reference.name %>Placeholder = value; }
        }
        public int <%= reference.relationship.otherEntity.entityNameCapitalized %>
        {
            get { return _<%= reference.name %>; }
            set
            {
                if (_<%= reference.name %> != value)
                {
                    _<%= reference.name %> = value;
                }
                if (_<%= reference.name %> > 0) {
                    OnPropertyChanged("<%= reference.relationship.otherEntity.entityNameCapitalized %>");
                    OnPropertyChanged("<%= reference.relationship.otherEntity.entityNameCapitalized %>Placeholder");
                }
            }
        }
        private int _<%= reference.name %> = -1;
        public List<<%= reference.relationship.otherEntity.entityNameCapitalized %>> <%= reference.relationship.otherEntity.entityNameCapitalized %>es { get { _<%= reference.name %>es.Sort((a, b) => a.ToString().CompareTo(b.ToString())); return _<%= reference.name %>es; } private set { } }
        private List<<%= reference.relationship.otherEntity.entityNameCapitalized %>> _<%= reference.name %>es = new List<<%= reference.relationship.otherEntity.entityNameCapitalized %>>();
                        
            <%_ } _%>
        <%_ } _%>

        public Base<%= persistClass %>DetailViewModel(object param){

            ExitCommand = new DelegateCommand(OnExit);
            Add<%= persistClass %>Command = new DelegateCommand(OnAdd<%= persistClass %>);

            init(param);

        }

        public async void init(object param) {
            int count = 0;
#if UNITY_5_3_OR_NEWER
    <%_ for (reference of dtoReferences) { _%>
        <%_ if (reference.collection && reference.relationship) { _%>
            // Implement with set references      
        <%_ } else if (reference.relationship) { _%>
            _<%= reference.name %>es = await <%= reference.name %>Repository.getEntities();
            OnPropertyChanged("<%= reference.relationship.otherEntity.entityNameCapitalized %>es");
        <%_ } _%>
    <%_ } _%>

            if (param != null && param != ""){
                <%= persistClass %> entity = await <%= entityInstance %>Repository.getEntity((string)param);
                <%_ for (const field of fields.filter(field=> !field.transient && (embedded || !field.id || !primaryKey.composite))) { _%>
                    <%_ if (field.javaFieldType==='byte[]' ) { _%>
                <%= field.fieldName %> = new Texture2D (2,2);
                <%= field.fieldName %>.LoadImage(entity.<%= field.fieldName %>);
                    <%_ } else { _%>
                <%= field.fieldName %> = entity.<%= field.fieldName %>;
                    <%_ } _%>
                OnPropertyChanged("<%= javaBeanCase(field.fieldName) %>");
                <%_ } _%>

        <%_ for (reference of dtoReferences) { _%>
            <%_ if (reference.collection && reference.relationship) { _%>
                // Implement with set references      
            <%_ } else if (reference.relationship) { _%>
                foreach (var <%= reference.name %> in _<%= reference.name %>es) {
                    if ( entity.<%= reference.name %>.id == <%= reference.name %>.id ) {
                        <%= reference.relationship.otherEntity.entityNameCapitalized %> = count;
                        break;
                    }
                    count ++;
                }
                count = 0;
            <%_ } _%>
        <%_ } _%>            
            }
#endif
        }

        private async void OnAdd<%= persistClass %>(object param){
            <%= persistClass %> entity = new <%= persistClass %> { 
            <%_ for (const field of fields.filter(field=> !field.transient && (embedded || !field.id || !primaryKey.composite))) { _%>
                    <%_ if (field.javaFieldType==='byte[]' ) { _%>
#if UNITY_5_3_OR_NEWER
                , <%= field.fieldName %> = <%= field.fieldName %>.GetRawTextureData()
#endif
                    <%_ } else { _%>
                <%= field.fieldName === 'id' ? field.fieldName + ' = ' + field.fieldName : ', ' + field.fieldName + ' = ' + field.fieldName %>
                    <%_ } _%>
            <%_ } _%>
            };
#if UNITY_5_3_OR_NEWER
            if (id != null) {
                entity = await <%= entityInstance %>Repository.updateEntity(entity);
            } else {
                entity = await <%= entityInstance %>Repository.createEntity(entity);
            }
            id = entity.Id;
            OnPropertyChanged("Id");
#endif
        }

        private void OnExit(object param){
            ViewModel.delegateCommands[<%= unity3dAppName %>App.MENU].Execute(param);    
        }
    }
}