#if UNITY_5_3_OR_NEWER
#define NOESIS
using Noesis;
using UnityEngine;
#else
#endif

using System.Collections;
using Proyecto26;
using System.Threading.Tasks;
using <%= unity3dAppName %>.Authentication.Model;

namespace <%= unity3dAppName %>
{
    public static partial class <%= unity3dAppName %>App
    {
        public readonly static string BASE_PATH = "http://localhost:8080/";

        public static void LogMessage(string title, string message)
        {
            Debug.Log(message);
        }

        private class <%= unity3dAppName %>Coroutine : MonoBehaviour { }

        private static <%= unity3dAppName %>Coroutine _runner;
        private static <%= unity3dAppName %>Coroutine Runner
        {
            get
            {
                if (_runner == null)
                {
                    _runner = new GameObject("<%= unity3dAppName %> dynamic threaded object").AddComponent<<%= unity3dAppName %>Coroutine>();
                    Object.DontDestroyOnLoad(_runner);
                }
                return _runner;
            }
        }

        public static Coroutine StartCoroutine(IEnumerator coroutine)
        {
            return Runner.StartCoroutine(coroutine);
        }

        public static void authenticate(string username, string password) {
            RequestHelper requestOptions = new RequestHelper
            {
                Uri = BASE_PATH + "api/authenticate",
                Body = new AuthenticationToken
                {
                    username = username,
                    password = password
                },
            };

            RestClient.Post<Token>(requestOptions)
            .Then(response =>
            {
                RestClient.DefaultRequestHeaders["Authorization"] = $"Bearer {response.id_token}";
            })
            .Catch(err => LogMessage("Error", err.Message));
        }
    }
}